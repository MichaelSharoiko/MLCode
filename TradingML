#import files such as numpy, pandas, matplotlib, keras, and tensorflow for ML
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from datetime import datetime
import math
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM
from keras.layers import Dropout



#import data from CSV files or from API
stock_data = pd.read_csv('SPY.csv')
training_set = stock_data.iloc[:, 1:2].values #.iloc[:, 1:2] is position by selection.
                                                #the [:, 1:2] returns a dataframe (matrix) which works with column size



#use a scaler for fitting the model, most common one is XGBoost
sc = MinMaxScaler(feature_range = (0, 1))
training_set_scaled = sc.fit_transform(training_set)



#This is where the base Deep Learning Networks Code goes
X_train = []
y_train = []
for i in range(100, 7066):                                                        #
    X_train.append(training_set_scaled[i-10:i, 0])                               #
    y_train.append(training_set_scaled[i, 0])
X_train, y_train = np.array(X_train), np.array(y_train)

# Reshaping
X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))

#incorporate LSTM algorithm in the ML 
model = Sequential()
model.add(LSTM(units = 50, return_sequences = True, input_shape = (X_train.shape[1], 1)))
model.add(Dropout(0.2)) #Droupout layer is a type of regularization technique which is used to prevent overfitting
model.add(LSTM(units = 50, return_sequences = True))
model.add(Dropout(0.2))
model.add(LSTM(units = 50))
model.add(Dropout(0.2))
model.add(Dense(units = 1))

model.compile(optimizer = 'adam', loss = 'mean_squared_error')
model.fit(X_train, y_train, epochs = 1, batch_size = 32)

stock_test = pd.read_csv('SPY.csv')
real_stock_price = stock_test.iloc[:, 1:2].values

stock_total = pd.concat((stock_data['Close'], stock_test['Close']), axis = 0)       
inputs = stock_total[len(stock_total) - len(stock_test) - 10:].values               
inputs = inputs.reshape(-1,1)                                                        
inputs = sc.transform(inputs)                                                        
X_test = []
for i in range(100, 7066):                                                            #
    X_test.append(inputs[i-10:i, 0])                                                 #
X_test = np.array(X_test)
X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))
predicted_stock_price = model.predict(X_test)
predicted_stock_price = sc.inverse_transform(predicted_stock_price)

#incorporate trading code where it can execute the code based on the real data and the predicted price.
SMA30 = pd.DataFrame() #simple moving average with 30 day window
SMA30['Close'] = stock_data['Close'].rolling(window = 30).mean()
SMA30

#create simple moving average for 100 days
SMA100 = pd.DataFrame()
SMA100['Close'] = stock_data['Close'].rolling(window = 100).mean()
SMA100

#Make new data frame to store all the new data

data = pd.DataFrame()
data['stock_data'] = stock_data['Close']
data['SMA30'] = SMA30['Close']
data['SMA100'] = SMA100['Close']
data


#signal to buy and sell the asset/stock using just the moving average
def buy_sell(data):
    sigPriceBuy = []
    sigPriceSell = []
    flag = -1                               
    
    for i in range(len(data)):             
        if data ['SMA30'][i] > data ['SMA100'][i]:
            if flag != 1:
                sigPriceBuy.append(data['stock_data'][i])
                sigPriceSell.append(np.nan)
                flag = 1
            else:
                sigPriceBuy.append(np.nan)
                sigPriceSell.append(np.nan)
        elif data['SMA30'][i] < data['SMA100'][i]:
            if flag != 0:
                sigPriceBuy.append(np.nan)
                sigPriceSell.append(data['stock_data'][i])
                flag = 0
            else:
                sigPriceBuy.append(np.nan)
                sigPriceSell.append(np.nan)
        else:
                sigPriceBuy.append(np.nan)
                sigPriceSell.append(np.nan)

    return (sigPriceBuy, sigPriceSell)

#Buying and Selling stock using the trading_strategy
def trading_strategy(stock_data, budget = 10000, u = 0.03, l = 0.03, show_graph = True, show_return = True):

    money = budget
    stock_data = stock_data.reset_index()
    net = []
    for i in range(len(stock_data)):
        today = stock_data.iloc[i]

        #Buy
        if (today['Close'] < today['SMA100']) and (abs(1 - today['Close'] /  today['lower_band']) < u ):
            if money > 0:
                stock_amt = int(money / today['Close'])
                money = 0
                net.append([today['Date'], today['Close'], 0, money])
        #Sell
        if (today['Close'] > today['SMA100']) and (abs(1 - today['upper_band'] / today['Close']) < 1):
            if money == 0:
                money = stock_amt * today['Close']
                stock_amt = 0
                net.append([today['Date'], today['Close'], 0, money])
    profit = net[-1][3] - budget

    if show_return == True:
        print('Number of Trades: {}'.format(len(net)))
        print('Time Frame: {} days'.format((net[-1][0] - net[0][0]).days))
        print('Profit: $[:.2f} | {}%'.format(profit, round(profit/budget*100, 2)))
    
    #if show_graph == True:
        #plotting.trading_history(stock_data.set_index('Date'), net)

    return profit, net


#store the buy and sell data into variables (This is for the one that purely uses the moving average to dictate price)
buy_sell = buy_sell(data)
data['Buy_Signal_Price'] = buy_sell[1]
data['Sell_Signal_Price'] = buy_sell[0]


#establish graph that shows results
plt.plot(real_stock_price, color = 'red', label = 'Real SPY Stock Price', alpha = 0.35)
plt.plot(predicted_stock_price, color = 'blue', label = 'Predicted SPY Stock Price', alpha = 0.35)
#plt.plot(data.index, data['SMA100'], label = 'Moving Average (100 days)')
plt.plot(data['stock_data'], label = 'SPY', alpha = 0.35)
plt.scatter(data.index, data['Buy_Signal_Price'], label = 'Buy', marker = '.', color = 'green')
plt.scatter(data.index, data['Sell_Signal_Price'], label = 'Sell', marker = '.', color = 'red')
plt.title('SPY Stock Price Prediction History')
plt.xlabel('1993 - 2021')
plt.ylabel('SPY Stock Price')
plt.legend()
plt.show()
